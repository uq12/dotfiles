# Setting up Onion Service
# You will have to modify the default configuration file of tor ($PREFIX/etc/tor/torrc). Here is an example of configuring SSH Onion Service, overwrite the torrc file with this content:

# Enable TOR SOCKS proxy
# SOCKSPort 127.0.0.1:9050

# Hidden Service: SSH
# HiddenServiceDir /data/data/com.termux/files/home/.tor/hidden_ssh
# HiddenServicePort 22 127.0.0.1:8022
# Then you need to make a directory where information about Hidden Service will be stored:

# mkdir -p ~/.tor/hidden_ssh
# Now you can execute in console tor. If start was successfull, you can get your onion service hostname:

# cat ~/.tor/hidden_ssh/hostname
# Output should be like this: g3yv3tvqrbow7koz.onion

SOCKSPort 127.0.0.1:9050
SOCKSPort 127.0.0.1:9052 #
SOCKSPort 127.0.0.1:9053 #
SOCKSPort 127.0.0.1:9054 #

RunAsDaemon 1

ControlPort 9051

HiddenServiceDir /data/data/com.termux/files/home/.tor/hidden_ssh
HiddenServicePort 22 127.0.0.1:8022

# Accessing your service cp
# First of all make sure that on client device `tor` is running and you have all necessary software for accessing Tor Network (in this case package `proxychains-ng`).

# To access the onion service created in previous step, run this:

# proxychains4 ssh g3yv3tvqrbow7koz.onion
# If everything is ok, the output should be like this:

# The authenticity of host 'g3yv3tvqrbow7koz.onion (127.42.42.0)' can't be established.
# ED25519 key fingerprint is SHA256:WGualHEq7SJdvVeXgy8a+btPQCd7uxTeXjlWdHHLwLc.
# Are you sure you want to continue connecting (yes/no)?
# Remember, `tor` should be running on both (client/server) sides, otherwise you will get connection errors. You can configure other servers (e.g. Nginx) in the same way as shown in above example for SSH.
